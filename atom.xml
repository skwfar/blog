<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://skwfar.github.io</id>
    <title>笔记</title>
    <updated>2020-08-12T03:49:12.790Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://skwfar.github.io"/>
    <link rel="self" href="https://skwfar.github.io/atom.xml"/>
    <subtitle>Sic mundus creatus est</subtitle>
    <logo>https://skwfar.github.io/images/avatar.png</logo>
    <icon>https://skwfar.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 笔记</rights>
    <entry>
        <title type="html"><![CDATA[在CentOS7上安装Golang环境]]></title>
        <id>https://skwfar.github.io/post/CentOS7-install-Golang-envirment/</id>
        <link href="https://skwfar.github.io/post/CentOS7-install-Golang-envirment/">
        </link>
        <updated>2020-03-16T01:44:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>安装好了Vim8，那么，安装Golang环境就是必不可少的了，使用Linux系统进行编程，除了Vim，还需要安装一些插件来提升编程体验。</p>
<h3 id="一-安装golang">一、安装Golang</h3>
<h5 id="1使用yum安装">1.使用yum安装</h5>
<p>我们可以使用CentOS自带的指令进行Golang的安装</p>
<pre><code>yum install golang
</code></pre>
<p>但该方法安装的Golang并不是最新的版本，若版本要求不高可以用此方法进行安装。</p>
<h5 id="2使用二进制文件安装">2.使用二进制文件安装</h5>
<p>官网：https://golang.org/</p>
<p>国内镜像：https://golang.google.cn/dl/</p>
<p>点击Download Go 找到Linux对应的安装包并复制下载地址，在服务器上下载</p>
<pre><code>wget https://golang.org/dl/go1.14.7.linux-amd64.tar.gz
</code></pre>
<p>若先前安装过老版本的Go，需先删除老版本Go文件夹</p>
<pre><code>rm -rf /usr/local/go
</code></pre>
<p>解压Go安装包</p>
<pre><code>tar -zxf go1.14.7.linux-amd64.tar.gz -C /usr/local
</code></pre>
<p>配置环境变量</p>
<pre><code>vim /etc/profile
</code></pre>
<p>在/etc/profile文件末尾添加以下配置，输入 :wq保存</p>
<pre><code>#golang env config

export GO111MODULE=on

export GOROOT=/usr/local/go

export GOPATH=/home/gopath

export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>
<p>切换到/home目录，并创建gopath文件夹</p>
<pre><code>cd /home

mkdir gopath
</code></pre>
<p>使配置文件生效</p>
<pre><code>source /etc/profile
</code></pre>
<p>查看Golang版本</p>
<pre><code>go version
</code></pre>
<p>若显示正确的Golang版本，那么Golang运行环境就安装完成啦。</p>
<p>测试一下go文件是否能正常运行吧，切换到gopath目录，创建一个hello.go</p>
<pre><code>cd /home/gopath 

vim hello.go
</code></pre>
<p>粘贴以下代码并:wq保存</p>
<pre><code>package main

import &quot;fmt&quot;

func main()  {

	fmt.Printf(&quot;Hello, world!&quot;)

}
</code></pre>
<p>在go文件保存的路径下执行</p>
<pre><code>go run hello.go
</code></pre>
<p>若输出Hello, world!那么就运行正常啦。</p>
<h3 id="二-配置vim">二、配置Vim</h3>
<p>为了使Vim能更好的作为Golang编程的工具，查阅了部分资料后，暂且安装4个插件来辅助编程</p>
<p>vim-go 使Vim支持代码格式化、语法检查、语法高亮、等功能。</p>
<p>NERDTree 方便管理和查看代码目录结构。</p>
<p>tagbar 用于查看代码结构。</p>
<p>YouCompleteMe 用于代码自动补全。</p>
<h5 id="1安装vundle">1.安装Vundle</h5>
<p>使用Vundle能对Vim插件进行管理和安装，我们需要先安装Vundle，首先拉取代码</p>
<pre><code class="language-php">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre>
<p>打开~/.vimrc，写入要安装的插件配置</p>
<pre><code class="language-bash">set nu
set nocompatible              &quot; be iMproved, required
filetype off                  &quot; required

&quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

&quot; let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'fatih/vim-go'

Plugin 'majutsushi/tagbar'

Plugin 'scrooloose/nerdtree'

Plugin 'Valloric/YouCompleteMe'

&quot; All of your Plugins must be added before the following line
call vundle#end()            &quot; required
filetype plugin indent on    &quot; required
</code></pre>
<h5 id="2安装插件">2.安装插件</h5>
<p>配置完成并保存后，在vim命令模式下执行</p>
<pre><code class="language-css">:PluginInstall
</code></pre>
<p>插件自动下载安装，显示 Finishing ... Done 则插件安装成功。</p>
<h5 id="3安装vim-go依赖">3.安装vim-go依赖</h5>
<p>在vim命令模块下执行：</p>
<pre><code class="language-css">:GoInstallBinaries
</code></pre>
<h5 id="4编译youcompleteme">4.编译YouCompleteMe</h5>
<p>安装完YouCompleteMe后，还需要单独编译才能运行YouaCompleteMe</p>
<pre><code>cd ~/.vim/bundle/YouCompleteMe

git submodule update --init --recursive

./install.py --go-completer
</code></pre>
<h5 id="5写入插件配置">5.写入插件配置</h5>
<p>打开~/.vimrc，在对应插件下写入插件配置</p>
<p>vim-go插件</p>
<pre><code class="language-bash">let g:go_fmt_command = &quot;goimports&quot; &quot; 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = &quot;quickfix&quot;
let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1
let g:godef_split = 2
</code></pre>
<p>NERDTree插件</p>
<pre><code class="language-xml">&quot; 打开和关闭NERDTree快捷键
map &lt;F10&gt; :NERDTreeToggle&lt;CR&gt;
&quot; 设置宽度
let NERDTreeWinSize = 30
&quot; 是否显示隐藏文件
let NERDTreeShowHidden=1
&quot; 修复^G
let g:NERDTreeNodeDelimiter = &quot;\u00a0&quot;
</code></pre>
<p>tagbar插件</p>
<pre><code class="language-ruby">nmap &lt;F9&gt; :TagbarToggle&lt;CR&gt;
let g:tagbar_width=25
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
</code></pre>
<p>配置因人而异，配置写入完成并保存后，在Vim中按F9召唤tagbar，按F10召唤NERDTree，需要其他快捷键可以在配置文件中更改。</p>
<p>在CentOS上的Golang环境就配置完成啦。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在CentOS7上安装Vim8]]></title>
        <id>https://skwfar.github.io/post/CentOS7-install-Vim8/</id>
        <link href="https://skwfar.github.io/post/CentOS7-install-Vim8/">
        </link>
        <updated>2020-03-15T01:34:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>由于公司电脑是内网，访问外网的VDI配置奇差无比，也为了能不用重复配置环境，萌生了在服务器上进行编程的想法，正好手上有一台腾讯云的服务器可以使用，服务器上为了宝塔插件的兼容性选择了安装CentOS7，CentOS自带的Vim版本太低，无法安装YouCompleteMe插件，所以开始升级服务器上的Vim。</p>
<h3 id="一-卸载旧版本vim">一、卸载旧版本Vim</h3>
<p>自带的可以使用yum卸载</p>
<pre><code>yum remove -y vim*
</code></pre>
<p>编译安装的直接删除安装目录</p>
<pre><code>rm -rf /usr/local/share/vim/vim82
</code></pre>
<h3 id="二-安装gcc编译器">二、安装GCC编译器</h3>
<pre><code>yum install -y gcc gcc-c++ kernel-devel
</code></pre>
<h3 id="三-编译安装">三、编译安装</h3>
<ol>
<li>
<p>下载vim</p>
<pre><code>git clone https://github.com/vim/vim.git
</code></pre>
<p>下载后进入vim目录进行配置，编译，安装</p>
</li>
<li>
<p>配置</p>
<pre><code>./configure --enable-multibyte --enable-python3interp=yes --with-python3-config-dir=/usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu --enable-fail-if-missing
</code></pre>
<p>由于我本地安装了python3.6， 所以只开启python3的支持，config路径会有所不同，需要找到python安装目录进行确认</p>
<p>参数说明：</p>
<p>–with-features=huge：支持最大特性</p>
<p>–enable-rubyinterp：启用Vim对ruby编写的插件的支持</p>
<p>–enable-pythoninterp：启用Vim对python编写的插件的支持</p>
<p>-enable-python3interp：启用对python3编写的插件的支持</p>
<p>–enable-luainterp：启用Vim对lua编写的插件的支持</p>
<p>–enable-perlinterp：启用Vim对perl编写的插件的支持</p>
<p>–enable-multibyte：多字节支持 可以在Vim中输入中文</p>
<p>--enable-fontset：支持字体设置</p>
<p>–enable-cscope：启用Vim对cscope支持</p>
<p>–enable-gui=gtk2：gtk2支持,也可以使用gnome，表示生成gvim</p>
<p>-–with-python-config-dir 指定 python配置 路径</p>
<p>--with-python3-config-dir 指定python3配置路径</p>
<p>–-prefix：编译安装路径</p>
<p>--with-compiledby：编译者</p>
<p>--enable-fail-if-missing 表示问题会提示报错，并停止</p>
</li>
<li>
<p>编译</p>
<pre><code>make
</code></pre>
<p>如果make的时候出错，执行</p>
<pre><code>make distclean
</code></pre>
</li>
<li>
<p>安装</p>
<pre><code>make install
</code></pre>
</li>
</ol>
<h3 id="四-查看vim版本">四、查看vim版本</h3>
<pre><code>:verison
</code></pre>
<p>查看到python3的选项前缀为+号，既是安装成功啦，下面可以愉快的安装依赖python的插件</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git的使用方法和一些想法]]></title>
        <id>https://skwfar.github.io/post/git/</id>
        <link href="https://skwfar.github.io/post/git/">
        </link>
        <updated>2017-01-21T12:21:46.000Z</updated>
        <content type="html"><![CDATA[<p>Git 是一个开源的分布式版本控制系统，一直都有听说过Git，但是却没有实际使用过，虽然觉得是一个很不错的工具，但对于这种需要撸命令行的会有稍微的抵触，最近开始使用是因为要与朋友合作开发参加比赛的项目，不得不用到版本控制，而搭建Hexo也需要用到Git，那么记录一下学习的过程和想法。</p>
<p>###安装<br>
Windows: 到官网https://git-scm.com/downloads选Windows安装包下载安装<br>
Linux:</p>
<pre><code>apt-get install git 或 yum install git
</code></pre>
<p>###配置<br>
安装完后，打开命令行 (Windows 右键 Git Bash here)，配置名字和邮箱，这会显示在以后的commit中。</p>
<p>###配置<br>
安装完后，打开命令行 (Windows 右键 Git Bash here)，配置名字和邮箱，这会显示在以后的commit中。</p>
<pre><code>git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;email@example.com&quot;
</code></pre>
<p>###初始化</p>
<pre><code>git init
</code></pre>
<p>初始化一个仓库 (默认 master 分支)，会在当前文件夹下面生成一个隐藏文件夹 .git</p>
<p>初始化一个仓库 (默认 master 分支)，会在当前文件夹下面生成一个隐藏文件夹 .git</p>
<p>###添加修改<br>
新建一个文件夹，使用命令行，进入到文件夹中，然后新建一个 hello.txt</p>
<p>###提交修改<br>
通过 add 命令将该目录下所有文件提交到暂存区 (也可以将 . 换成需要单独提交的文件名)</p>
<p>然后通过 commit 命令将暂存区的所有内容提交到当前分支</p>
<pre><code>git add .
git commit -m &quot;This is my first commit&quot;
</code></pre>
<p>###撤销修改<br>
修改一下 hello.txt 文件，然后通过 diff 命令查看当前文件与暂存区中的文件的不同，如果需要撤销修改，则通过 checkout 命令进行撤销</p>
<pre><code>git diff hello.txt
git checkout -- hello.txt
</code></pre>
<p>再修改一下 hello.txt 文件或者再建一个文件，然后就可以通过 status 命令查看当前那个文件被修改了，新建了那个文件。</p>
<pre><code>git status
</code></pre>
<p>###版本回退<br>
然后再提交一下，如果这时候想回到第一次提交那会，就可以通过 log 命令查看提交历史和显示提交对象的哈希值，然后通过 reset 命令指定哈希值 (前四位就够了) 回到想要回到的commit。</p>
<pre><code>git log
git reset --hard xxxx
</code></pre>
<p>如果感觉太繁琐，可以加上参数  --pretty=oneline，只会显示版本号和提交时的备注信息</p>
<pre><code>git log --pretty=oneline
</code></pre>
<p>git reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</p>
<p>例如执行以下代码退回到上一个版本</p>
<pre><code> git reset --hard HEAD~1
</code></pre>
<p>###分支管理<br>
分支的特性将 Git 从版本控制系统家族里区分出来。使用分支可以从开发主线上分离开来，然后在新的分支上解决特定问题，同时不会影响主线。其它的一些版本控制系统，创建分支需要创建整个源代码目录的副本。</p>
<p>在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对 象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</p>
<p>###创建合并分支<br>
使用 checkout 命令切换分支，-b 参数表示如果该分支不存在就先创建分支然后切换。</p>
<p><code>$ git checkout -b fix-bug</code><br>
然后在 fix-bug分支下修改文件添加提交后，在再切换回主分支：</p>
<p><code>$ git checkout master</code><br>
可以看到主分支里的文件并没有被修改，例如在 fix-bug 分支下开发完成后，在 master 分支下就可以使用 merge 命令合并分支就可以看到修改的结果了。</p>
<p><code>$ git merge fix-bug</code><br>
###解决冲突<br>
切换到 fix-bug分支修改文件，添加提交；切换回 master 没有获取  fix-bug分支的修改后的提交的同时也修改文件，添加提交，然后合并。这时候系统就不知道保留谁的修改，还是都保留，就会产生冲突。</p>
<pre><code>Auto-merging hello.txt
CONFLICT (content): Merge conflict in hello.txt
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>
<p>打开文件就会发现文件里面有一些符号：</p>
<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
From master
=======
From fix-bug
&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev
</code></pre>
<p>这时候只需要删掉不需要的内容 (或者都保留) 重新提交，就可以解决冲突啦。</p>
<p>上面只是简单的Git操作和解决冲突的方法，Git是一个非常好的版本控制系统，经过简单的学习就可以进行版本控制，但是更加复杂的操作需要理解Git设计时的理念才能更好的使用。以前一个人写代码的时候总是随心所欲，但是没有版本控制会导致若出现了BUG，无法比对以前的代码，也没有办法找回历史的代码，是灾难性的，只能重新回忆并重新编写代码，作为刚接触Git的菜鸟而言，还需要继续加深理解。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 Markdown]]></title>
        <id>https://skwfar.github.io/post/about-markdown/</id>
        <link href="https://skwfar.github.io/post/about-markdown/">
        </link>
        <updated>2016-07-27T13:51:12.000Z</updated>
        <content type="html"><![CDATA[<p>由于搭建静态博客Hexo的原因，第一次认真的学习了一下关于Markdown的写法，记录一下</p>
<h2 id="基本语法">基本语法</h2>
<h3 id="标题">标题</h3>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
</code></pre>
<p>分别对应HTML中的<code>&lt;h1&gt;一级标题&lt;/h1&gt;</code>，以此类推。</p>
<p><code>**用两个星号标记起来，表示加粗**</code>，<code>*一个星号，表示斜体*</code>，<code>~~这样子表示删除~~</code>，这些就是最基本的语法了。</p>
<h2 id="插入链接">插入链接</h2>
<p><strong>插入链接:</strong><br>
这是一个 <code>[链接](http://url.com/)</code></p>
<p><strong>快速链接:</strong><br>
只需在网址头尾用尖括号包裹，比如<code>&lt;http://url.com&gt;</code></p>
<p><strong>特别支持:</strong><br>
<code>[Google (target=_blank id=google_link)](google.com)</code>  其中内容括号内的<code>target=_blank id=google_link</code> 会自动扩展到最终 HTML 对应 A 标签下的属性，另外，<code>google.com</code> 作为一个域名，不需要补全<code>http://</code>, 最终会自动补全。</p>
<h2 id="插入图片">插入图片</h2>
<p>跟插入链接的方式很像，就是前面多一个<code>!</code>， 但是在一般的客户端编辑器，比如 <a href="http://markeditor.com">MarkEditor</a> 中直接拖入图片就可以。<br>
<code>![)](图片的url)</code></p>
<h2 id="列表">列表</h2>
<p><strong>无序列表:</strong></p>
<pre><code>-   Tony
-   Amy
-   Louis
</code></pre>
<p><strong>有序列表则使用数字接着一个英文句点：</strong></p>
<pre><code>1.  Apple
2.  Bird
3.  Cat
</code></pre>
<h2 id="居中与居右">居中与居右</h2>
<p>单独一行的时候，<code>[文本内容]</code>表示居中对齐，<code>[文本内容]]</code>表示居右(右侧再多一个<code>]</code>)，其它默认情况下都是居左。</p>
<h2 id="内容引用">内容引用</h2>
<p>用<code>&gt;</code>放在段首，之后是空格，输入文字:</p>
<pre><code>&gt; 我
&gt; 随风飘荡
</code></pre>
<h2 id="分割线">分割线</h2>
<p><strong><code>-</code>加上空格组成，三个以上:</strong></p>
<pre><code>- - - - - -
</code></pre>
]]></content>
    </entry>
</feed>