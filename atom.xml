<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://skwfar.github.io</id>
    <title>笔记</title>
    <updated>2020-08-11T07:38:55.296Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://skwfar.github.io"/>
    <link rel="self" href="https://skwfar.github.io/atom.xml"/>
    <subtitle>Sic mundus creatus est</subtitle>
    <logo>https://skwfar.github.io/images/avatar.png</logo>
    <icon>https://skwfar.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 笔记</rights>
    <entry>
        <title type="html"><![CDATA[在CentOS7上安装Golang环境]]></title>
        <id>https://skwfar.github.io/post/CentOS7-install-Golang-envirment/</id>
        <link href="https://skwfar.github.io/post/CentOS7-install-Golang-envirment/">
        </link>
        <updated>2020-03-16T01:44:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>安装好了Vim8，那么，安装Golang环境就是必不可少的了，使用Linux系统进行编程，除了Vim，还需要安装一些插件来提升编程体验。</p>
<h3 id="一-安装golang">一、安装Golang</h3>
<h5 id="1使用yum安装">1.使用yum安装</h5>
<p>我们可以使用CentOS自带的指令进行Golang的安装</p>
<pre><code>yum install golang
</code></pre>
<p>但该方法安装的Golang并不是最新的版本，若版本要求不高可以用此方法进行安装。</p>
<h5 id="2使用二进制文件安装">2.使用二进制文件安装</h5>
<p>官网：https://golang.org/</p>
<p>国内镜像：https://golang.google.cn/dl/</p>
<p>点击Download Go 找到Linux对应的安装包并复制下载地址，在服务器上下载</p>
<pre><code>wget https://golang.org/dl/go1.14.7.linux-amd64.tar.gz
</code></pre>
<p>若先前安装过老版本的Go，需先删除老版本Go文件夹</p>
<pre><code>rm -rf /usr/local/go
</code></pre>
<p>解压Go安装包</p>
<pre><code>tar -zxf go1.14.7.linux-amd64.tar.gz -C /usr/local
</code></pre>
<p>配置环境变量</p>
<pre><code>vim /etc/profile
</code></pre>
<p>在/etc/profile文件末尾添加以下配置，输入 :wq保存</p>
<pre><code>#golang env config

export GO111MODULE=on

export GOROOT=/usr/local/go

export GOPATH=/home/gopath

export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>
<p>切换到/home目录，并创建gopath文件夹</p>
<pre><code>cd /home

mkdir gopath
</code></pre>
<p>使配置文件生效</p>
<pre><code>source /etc/profile
</code></pre>
<p>查看Golang版本</p>
<pre><code>go version
</code></pre>
<p>若显示正确的Golang版本，那么Golang运行环境就安装完成啦。</p>
<p>测试一下go文件是否能正常运行吧，切换到gopath目录，创建一个hello.go</p>
<pre><code>cd /home/gopath 

vim hello.go
</code></pre>
<p>粘贴以下代码并:wq保存</p>
<pre><code>package main

import &quot;fmt&quot;

func main()  {

	fmt.Printf(&quot;Hello, world!&quot;)

}
</code></pre>
<p>在go文件保存的路径下执行</p>
<pre><code>go run hello.go
</code></pre>
<p>若输出Hello, world!那么就运行正常啦。</p>
<h3 id="二-配置vim">二、配置Vim</h3>
<p>为了使Vim能更好的作为Golang编程的工具，查阅了部分资料后，暂且安装4个插件来辅助编程</p>
<p>vim-go 使Vim支持代码格式化、语法检查、语法高亮、等功能。</p>
<p>NERDTree 方便管理和查看代码目录结构。</p>
<p>tagbar 用于查看代码结构。</p>
<p>YouCompleteMe 用于代码自动补全。</p>
<h5 id="1安装vundle">1.安装Vundle</h5>
<p>使用Vundle能对Vim插件进行管理和安装，我们需要先安装Vundle，首先拉取代码</p>
<pre><code class="language-php">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre>
<p>打开~/.vimrc，写入要安装的插件配置</p>
<pre><code class="language-bash">set nu
set nocompatible              &quot; be iMproved, required
filetype off                  &quot; required

&quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

&quot; let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'fatih/vim-go'

Plugin 'majutsushi/tagbar'

Plugin 'scrooloose/nerdtree'

Plugin 'Valloric/YouCompleteMe'

&quot; All of your Plugins must be added before the following line
call vundle#end()            &quot; required
filetype plugin indent on    &quot; required
</code></pre>
<h5 id="2安装插件">2.安装插件</h5>
<p>配置完成并保存后，在vim命令模式下执行</p>
<pre><code class="language-css">:PluginInstall
</code></pre>
<p>插件自动下载安装，显示 Finishing ... Done 则插件安装成功。</p>
<h5 id="3安装vim-go依赖">3.安装vim-go依赖</h5>
<p>在vim命令模块下执行：</p>
<pre><code class="language-css">:GoInstallBinaries
</code></pre>
<h5 id="4编译youcompleteme">4.编译YouCompleteMe</h5>
<p>安装完YouCompleteMe后，还需要单独编译才能运行YouaCompleteMe</p>
<pre><code>cd ~/.vim/bundle/YouCompleteMe

git submodule update --init --recursive

./install.py --go-completer
</code></pre>
<h5 id="5写入插件配置">5.写入插件配置</h5>
<p>打开~/.vimrc，在对应插件下写入插件配置</p>
<p>vim-go插件</p>
<pre><code class="language-bash">let g:go_fmt_command = &quot;goimports&quot; &quot; 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = &quot;quickfix&quot;
let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1
let g:godef_split = 2
</code></pre>
<p>NERDTree插件</p>
<pre><code class="language-xml">&quot; 打开和关闭NERDTree快捷键
map &lt;F10&gt; :NERDTreeToggle&lt;CR&gt;
&quot; 设置宽度
let NERDTreeWinSize = 30
&quot; 是否显示隐藏文件
let NERDTreeShowHidden=1
&quot; 修复^G
let g:NERDTreeNodeDelimiter = &quot;\u00a0&quot;
</code></pre>
<p>tagbar插件</p>
<pre><code class="language-ruby">nmap &lt;F9&gt; :TagbarToggle&lt;CR&gt;
let g:tagbar_width=25
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
</code></pre>
<p>配置因人而异，配置写入完成并保存后，在Vim中按F9召唤tagbar，按F10召唤NERDTree，需要其他快捷键可以在配置文件中更改。</p>
<p>在CentOS上的Golang环境就配置完成啦。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在CentOS7上安装Vim8]]></title>
        <id>https://skwfar.github.io/post/CentOS7-install-Vim8/</id>
        <link href="https://skwfar.github.io/post/CentOS7-install-Vim8/">
        </link>
        <updated>2020-03-15T01:34:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>由于公司电脑是内网，访问外网的VDI配置奇差无比，也为了能不用重复配置环境，萌生了在服务器上进行编程的想法，正好手上有一台腾讯云的服务器可以使用，服务器上为了宝塔插件的兼容性选择了安装CentOS7，CentOS自带的Vim版本太低，无法安装YouCompleteMe插件，所以开始升级服务器上的Vim。</p>
<h3 id="一-卸载旧版本vim">一、卸载旧版本Vim</h3>
<p>自带的可以使用yum卸载</p>
<pre><code>yum remove -y vim*
</code></pre>
<p>编译安装的直接删除安装目录</p>
<pre><code>rm -rf /usr/local/share/vim/vim82
</code></pre>
<h3 id="二-安装gcc编译器">二、安装GCC编译器</h3>
<pre><code>yum install -y gcc gcc-c++ kernel-devel
</code></pre>
<h3 id="三-编译安装">三、编译安装</h3>
<ol>
<li>
<p>下载vim</p>
<pre><code>git clone https://github.com/vim/vim.git
</code></pre>
<p>下载后进入vim目录进行配置，编译，安装</p>
</li>
<li>
<p>配置</p>
<pre><code>./configure --enable-multibyte --enable-python3interp=yes --with-python3-config-dir=/usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu --enable-fail-if-missing
</code></pre>
<p>由于我本地安装了python3.6， 所以只开启python3的支持，config路径会有所不同，需要找到python安装目录进行确认</p>
<p>参数说明：</p>
<p>–with-features=huge：支持最大特性</p>
<p>–enable-rubyinterp：启用Vim对ruby编写的插件的支持</p>
<p>–enable-pythoninterp：启用Vim对python编写的插件的支持</p>
<p>-enable-python3interp：启用对python3编写的插件的支持</p>
<p>–enable-luainterp：启用Vim对lua编写的插件的支持</p>
<p>–enable-perlinterp：启用Vim对perl编写的插件的支持</p>
<p>–enable-multibyte：多字节支持 可以在Vim中输入中文</p>
<p>--enable-fontset：支持字体设置</p>
<p>–enable-cscope：启用Vim对cscope支持</p>
<p>–enable-gui=gtk2：gtk2支持,也可以使用gnome，表示生成gvim</p>
<p>-–with-python-config-dir 指定 python配置 路径</p>
<p>--with-python3-config-dir 指定python3配置路径</p>
<p>–-prefix：编译安装路径</p>
<p>--with-compiledby：编译者</p>
<p>--enable-fail-if-missing 表示问题会提示报错，并停止</p>
</li>
<li>
<p>编译</p>
<pre><code>make
</code></pre>
<p>如果make的时候出错，执行</p>
<pre><code>make distclean
</code></pre>
</li>
<li>
<p>安装</p>
<pre><code>make install
</code></pre>
</li>
</ol>
<h3 id="四-查看vim版本">四、查看vim版本</h3>
<pre><code>:verison
</code></pre>
<p>查看到python3的选项前缀为+号，既是安装成功啦，下面可以愉快的安装依赖python的插件</p>
]]></content>
    </entry>
</feed>